{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/dashboard/dashboard.component.css","webpack:///./src/app/components/dashboard/dashboard.component.html","webpack:///./src/app/components/dashboard/dashboard.component.ts","webpack:///./src/app/components/footer/footer.component.css","webpack:///./src/app/components/footer/footer.component.html","webpack:///./src/app/components/footer/footer.component.ts","webpack:///./src/app/components/header/header.component.css","webpack:///./src/app/components/header/header.component.html","webpack:///./src/app/components/header/header.component.ts","webpack:///./src/app/components/header/header.model.ts","webpack:///./src/app/components/layouts/homelayout.component.ts","webpack:///./src/app/components/layouts/loginlayout.component.ts","webpack:///./src/app/components/signin/signin.component.css","webpack:///./src/app/components/signin/signin.component.html","webpack:///./src/app/components/signin/signin.component.ts","webpack:///./src/app/components/signin/signin.service.ts","webpack:///./src/app/components/signup/signup.component.css","webpack:///./src/app/components/signup/signup.component.html","webpack:///./src/app/components/signup/signup.component.ts","webpack:///./src/app/components/signup/signup.service.ts","webpack:///./src/app/core/alert/alert.component.html","webpack:///./src/app/core/alert/alert.component.ts","webpack:///./src/app/core/alert/alert.model.ts","webpack:///./src/app/core/alert/alert.service.ts","webpack:///./src/app/core/alert/index.ts","webpack:///./src/app/core/auth.guard.ts","webpack:///./src/app/core/jwt.service.ts","webpack:///./src/app/core/loading/loading.component.css","webpack:///./src/app/core/loading/loading.component.html","webpack:///./src/app/core/loading/loading.component.ts","webpack:///./src/app/core/save.service.ts","webpack:///./src/app/core/validaters/password.validater.ts","webpack:///./src/app/core/validaters/username.validaters.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;;;;;;;;;;;;;;ACZyC;AACc;AACgB;AACA;AACS;AAClC;AACkC;AACE;AAElF,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,4FAAmB;QAC9B,WAAW,EAAE,CAAC,0DAAS,CAAC;QACxB,QAAQ,EAAE;YACR,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,4FAAkB,EAAE;SACrD;KACF;IACD;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,8FAAoB;QAC/B,QAAQ,EAAE;YACR,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,mFAAe,EAAE;YAC9C,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,mFAAe,EAAE;SAC/C;KACF;CACF,CAAC;AAMF;IAAA;IAAgC,CAAC;IAApB,gBAAgB;QAJ5B,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;YACxD,OAAO,EAAE,CAAC,4DAAY,CAAC;SACxB,CAAC;OACW,gBAAgB,CAAI;IAAD,uBAAC;CAAA;AAAJ;;;;;;;;;;;;AChC7B,+DAA+D,+H;;;;;;;;;;;ACA/D,iF;;;;;;;;;;;;;;;;;ACA0C;AAQ1C;IALA;QAME,UAAK,GAAG,SAAS,CAAC;IACpB,CAAC;IAFY,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,yFAAmC;;SAEpC,CAAC;OACW,YAAY,CAExB;IAAD,mBAAC;CAAA;AAFwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRiC;AACjB;AACe;AACA;AACT;AACgC;AACrC;AAC6B;AAO5C;AACuC;AACK;AACS;AAClC;AACC;AACqB;AACG;AACA;AACS;AACE;AACjC;AAuCjD;IAAA;IAAyB,CAAC;IAAb,SAAS;QArCrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;gBACZ,mFAAe;gBACf,oFAAe;gBACf,6FAAkB;gBAClB,2DAAc;gBACd,iFAAgB;gBAChB,oFAAe;gBACf,oFAAe;gBACf,6FAAmB;gBACnB,+FAAoB;aACrB;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,oEAAgB;gBAChB,4FAAuB;gBACvB,uDAAY,CAAC,OAAO,CAClB;oBACE,WAAW,EAAE,IAAI;iBAClB,CACF;gBACD,2DAAW;gBACX,mEAAmB;gBACnB,qEAAgB;gBAChB,6DAAgB;gBAChB,WAAW;gBACX,gEAAc;gBACd,iEAAe;gBACf,iEAAe;gBACf,mEAAiB;gBACjB,+DAAa;gBACb,+DAAgB,CAAC,OAAO,EAAE;aAC3B;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;AChEtB,+DAA+D,mK;;;;;;;;;;;ACA/D,kEAAkE,qBAAqB,Y;;;;;;;;;;;;;;;;;;;ACArC;AACI;AACC;AAOvD;IAEE,4BACU,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAFhC,gBAAW,GAAgB,IAAI,gEAAW,CAAC;QAIzC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,CAAC,CAAC;IAClE,CAAC;IAED,qCAAQ,GAAR;IACA,CAAC;IATU,kBAAkB;QAL9B,+DAAS,CAAC;YACT,QAAQ,EAAE,eAAe;YACzB,0HAAyC;;SAE1C,CAAC;+EAIsB,4DAAU;OAHrB,kBAAkB,CAa9B;IAAD,yBAAC;CAAA;AAb8B;;;;;;;;;;;;ACT/B,+DAA+D,2J;;;;;;;;;;;ACA/D,+C;;;;;;;;;;;;;;;;;ACAkD;AAOlD;IAEE;IAAgB,CAAC;IAEjB,kCAAQ,GAAR;IACA,CAAC;IALU,eAAe;QAL3B,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;YACtB,iHAAsC;;SAEvC,CAAC;;OACW,eAAe,CAO3B;IAAD,sBAAC;CAAA;AAP2B;;;;;;;;;;;;ACP5B,+DAA+D,2J;;;;;;;;;;;ACA/D,waAAwa,qBAAqB,iiB;;;;;;;;;;;;;;;;;;;;;ACA3Y;AACI;AACU;AACvB;AACI;AAO7C;IAEE,yBACU,MAAc,EACd,UAAsB,EACtB,YAA0B;QAF1B,WAAM,GAAN,MAAM,CAAQ;QACd,eAAU,GAAV,UAAU,CAAY;QACtB,iBAAY,GAAZ,YAAY,CAAc;QAJpC,gBAAW,GAAgB,IAAI,yDAAW,CAAC;QAMzC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,CAAC,CAAC;IAClE,CAAC;IAED,kCAAQ,GAAR;IACA,CAAC;IAED,gCAAM,GAAN;QACE,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC;QAC/B,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,mCAAmC,CAAC,CAAC;QAC/D,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;IACpC,CAAC;IAjBU,eAAe;QAL3B,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;YACtB,iHAAsC;;SAEvC,CAAC;+EAIkB,sDAAM;YACF,4DAAU;YACR,sEAAY;OALzB,eAAe,CAmB3B;IAAD,sBAAC;CAAA;AAnB2B;;;;;;;;;;;;;ACX5B;AAAA;AAAA;IAAA;IAKA,CAAC;IAAD,kBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;ACLiD;AASlD;IAEE;IAAgB,CAAC;IAEjB,sCAAQ,GAAR;IACA,CAAC;IALU,mBAAmB;QAP/B,+DAAS,CAAC;YACT,QAAQ,EAAE,gBAAgB;YAC1B,QAAQ,EAAE,2EAGT;SACF,CAAC;;OACW,mBAAmB,CAO/B;IAAD,0BAAC;CAAA;AAP+B;;;;;;;;;;;;;;;;;;ACTU;AAM1C;IAAA;IAAmC,CAAC;IAAvB,oBAAoB;QAJhC,+DAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;YAC3B,QAAQ,EAAE,iCAAiC;SAC5C,CAAC;OACW,oBAAoB,CAAG;IAAD,2BAAC;CAAA;AAAH;;;;;;;;;;;;ACNjC,+BAA+B,kBAAkB,0BAA0B,GAAG,6CAA6C,mX;;;;;;;;;;;ACA3H,sxBAAsxB,oBAAoB,igBAAigB,oBAAoB,sMAAsM,MAAM,MAAM,oJ;;;;;;;;;;;;;;;;;;;;;;;;ACA/9C;AAC+B;AAChC;AACK;AACX;AACF;AACuB;AAChB;AAOhD;IAEE,yBACU,EAAe,EACf,aAA4B,EAC5B,MAAqB,EACrB,MAAc,EACd,UAAsB,EACtB,YAA0B,EAC1B,OAA0B;QAN1B,OAAE,GAAF,EAAE,CAAa;QACf,kBAAa,GAAb,aAAa,CAAe;QAC5B,WAAM,GAAN,MAAM,CAAe;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,eAAU,GAAV,UAAU,CAAY;QACtB,iBAAY,GAAZ,YAAY,CAAc;QAC1B,YAAO,GAAP,OAAO,CAAmB;QAEpC,wBAAmB,GAAG;YACpB,OAAO,EAAE;gBACP,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,mBAAmB,EAAE;gBAClD,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,qBAAqB,EAAE;aACpD;YACD,UAAU,EAAE;gBACV,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,sBAAsB,EAAE;aACtD;SACF,CAAC;IATE,CAAC;IAWL,kCAAQ,GAAR;QACE,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,qCAAW,GAAX;QACE,gCAAgC;QAChC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YAC9B,KAAK,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC;gBAC5C,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,OAAO,CAAC,iDAAiD,CAAC;aACtE,CAAC,CAAC;YACH,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SACpD,CAAC,CAAC;IACL,CAAC;IAAA,CAAC;IAEF,kCAAQ,GAAR,UAAS,KAAK;QAAd,iBAkBC;QAjBC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;QAC1B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,UAAC,IAAI;YAChD,IAAG,IAAI,CAAC,MAAM,IAAI,GAAG,EAAC;gBACpB,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAC,SAAS,CAAC,CAAC;gBAC5C,KAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACtC,IAAI,WAAW,GAAG;oBAChB,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG;oBACjB,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ;oBACxB,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK;oBACtB,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ;iBAC7B;gBACD,KAAI,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC7D,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;aACtC;iBAAI;gBACH,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACvC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAtDU,eAAe;QAL3B,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;YACtB,iHAAsC;;SAEvC,CAAC;+EAIc,0DAAW;YACA,6DAAa;YACpB,wDAAa;YACb,sDAAM;YACF,4DAAU;YACR,sEAAY;YACjB,6DAAiB;OATzB,eAAe,CAwD3B;IAAD,sBAAC;CAAA;AAxD2B;;;;;;;;;;;;;;;;;;;;ACde;AACoB;AACG;AAKlE;IAEE,uBACU,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAF1B,YAAO,GAAW,qEAAW,CAAC,OAAO,CAAC;IAGlC,CAAC;IAEE,gCAAQ,GAAf,UAAgB,KAAa;QAC3B,IAAI,MAAM,GAAM,IAAI,CAAC,OAAO,mBAAgB,CAAC;QAC7C,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IACvC,CAAC;IATU,aAAa;QAHzB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;+EAIgB,+DAAU;OAHf,aAAa,CAUzB;IAAD,oBAAC;CAAA;AAVyB;;;;;;;;;;;;ACP1B,+BAA+B,kBAAkB,0BAA0B,GAAG,6CAA6C,mX;;;;;;;;;;;ACA3H,izBAAizB,oBAAoB,shBAAshB,oBAAoB,+fAA+f,oBAAoB,ypBAAypB,oBAAoB,4vBAA4vB,oBAAoB,ufAAuf,oBAAoB,iLAAiL,MAAM,MAAM,sK;;;;;;;;;;;;;;;;;;;;;;;;;ACAr9H;AAC+B;AACD;AACD;AAC9B;AACiB;AACvB;AACqB;AACvB;AAOzC;IAEE,yBACU,EAAe,EACf,aAA4B,EAC5B,MAAqB,EACrB,MAAc,EACd,YAA0B;QAJ1B,OAAE,GAAF,EAAE,CAAa;QACf,kBAAa,GAAb,aAAa,CAAe;QAC5B,WAAM,GAAN,MAAM,CAAe;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,iBAAY,GAAZ,YAAY,CAAc;QANpC,YAAO,GAAW,qEAAW,CAAC,OAAO,CAAC;QAWtC,wBAAmB,GAAG;YACpB,UAAU,EAAE,CAAE,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAE;YACtE,UAAU,EAAE;gBACV,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,sBAAsB,EAAE;gBACrD,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,6CAA6C,EAAE;gBAC7E,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,iDAAiD,EAAE;gBACjF,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,qDAAqD,EAAE;gBACnF,EAAE,IAAI,EAAE,eAAe,EAAE,OAAO,EAAE,sCAAsC,EAAE;aAC3E;YACD,OAAO,EAAE;gBACP,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,mBAAmB,EAAE;gBAClD,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,qBAAqB,EAAE;aACpD;YACD,kBAAkB,EAAE;gBAClB,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,8BAA8B,EAAE;gBAC7D,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,mBAAmB,EAAE;aACnD;YACD,UAAU,EAAE;gBACV,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,sBAAsB,EAAE;gBACrD,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,6CAA6C,EAAE;gBAC7E,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,kFAAkF,EAAE;aACjH;YACD,OAAO,EAAE;gBACP,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,sCAAsC,EAAE;aACrE;SACF,CAAC;IA7BE,CAAC;IA+BL,kCAAQ,GAAR;QACE,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,qCAAW,GAAX;QACE,gCAAgC;QAChC,IAAI,CAAC,wBAAwB,GAAG,IAAI,wDAAS,CAAC;YAC5C,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC;gBAC/C,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvB,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,OAAO,CAAC,iDAAiD,CAAC;aACtE,CAAC,CAAC;YACH,gBAAgB,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SAC3D,EAAE,UAAC,SAAoB;YACtB,OAAO,qFAAiB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,gCAAgC;QAChC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YAC/B,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAE;YACpC,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC;gBAC/C,sFAAiB,CAAC,aAAa;gBAC/B,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC;gBACxB,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvB,yDAAU,CAAC,OAAO,CAAC,yCAAyC,CAAC;gBAC7D,yDAAU,CAAC,QAAQ;aACnB,CAAC,CAAC;YACH,KAAK,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC;gBAC5C,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,OAAO,CAAC,iDAAiD,CAAC;aACtE,CAAC,CAAC;YACH,kBAAkB,EAAE,IAAI,CAAC,wBAAwB;YACjD,KAAK,EAAE,IAAI,0DAAW,CAAC,KAAK,EAAE,yDAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SAC3D,CAAC,CAAC;IACL,CAAC;IAAA,CAAC;IAEF,kCAAQ,GAAR,UAAS,KAAK;QAAd,iBASC;QARC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,UAAC,IAAI;YAChD,IAAG,IAAI,CAAC,MAAM,IAAI,GAAG,EAAC;gBACpB,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAC,SAAS,CAAC,CAAC;gBAC5C,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;aACnC;iBAAI;gBACH,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACvC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IApFU,eAAe;QAL3B,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;YACtB,iHAAsC;;SAEvC,CAAC;+EAIc,0DAAW;YACA,6DAAa;YACpB,wDAAa;YACb,sDAAM;YACA,sEAAY;OAPzB,eAAe,CAqF3B;IAAD,sBAAC;CAAA;AArF2B;;;;;;;;;;;;;;;;;;;;;;ACfe;AACoB;AACG;AAE7B;AACoB;AAKzD;IAKE,uBACU,IAAgB,EAChB,WAAwB;QADxB,SAAI,GAAJ,IAAI,CAAY;QAChB,gBAAW,GAAX,WAAW,CAAa;QANlC,YAAO,GAAW,qEAAW,CAAC,OAAO,CAAC;QACtC,gBAAW,GAAG;YACZ,OAAO,EAAE,IAAI,gEAAW,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC;SACjE,CAAC;IAIE,CAAC;IAEE,gCAAQ,GAAf,UAAgB,KAAa;QAC3B,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,0DAAG,CAC1D,cAAI;YACF,OAAO,IAAI;QACb,CAAC,CACJ,CAAC,CAAC;IAGL,CAAC;IACM,mCAAW,GAAlB,UAAmB,QAAgB;QACjC,IAAI,MAAM,GAAM,IAAI,CAAC,OAAO,0BAAqB,QAAU,CAAC;QAC5D,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAC/B,CAAC;IAtBU,aAAa;QAHzB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;+EAOgB,+DAAU;YACH,8DAAW;OAPvB,aAAa,CAwBzB;IAAD,oBAAC;CAAA;AAxByB;;;;;;;;;;;;ACV1B,gEAAgE,mBAAmB,6BAA6B,eAAe,+DAA+D,a;;;;;;;;;;;;;;;;;;;ACAjI;AAEZ;AACF;AAM/C;IAII,wBAAoB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;QAF9C,WAAM,GAAY,EAAE,CAAC;IAE6B,CAAC;IAEnD,iCAAQ,GAAR;QAAA,iBAUC;QATG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,UAAC,KAAY;YACpE,IAAI,CAAC,KAAK,EAAE;gBACR,+CAA+C;gBAC/C,KAAI,CAAC,MAAM,GAAG,EAAE,CAAC;gBACjB,OAAO;aACV;YACD,qBAAqB;YACrB,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;IACP,CAAC;IACD,oCAAW,GAAX,UAAY,KAAY;QACpB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,WAAC,IAAI,QAAC,KAAK,KAAK,EAAX,CAAW,CAAC,CAAC;IACvD,CAAC;IAED,iCAAQ,GAAR,UAAS,KAAY;QACjB,IAAI,CAAC,KAAK,EAAE;YACR,OAAO;SACV;QAED,uCAAuC;QACvC,QAAQ,KAAK,CAAC,IAAI,EAAE;YAChB,KAAK,sDAAS,CAAC,OAAO;gBAClB,OAAO,qBAAqB,CAAC;YACjC,KAAK,sDAAS,CAAC,KAAK;gBAChB,OAAO,oBAAoB,CAAC;YAChC,KAAK,sDAAS,CAAC,IAAI;gBACf,OAAO,kBAAkB,CAAC;YAC9B,KAAK,sDAAS,CAAC,OAAO;gBAClB,OAAO,qBAAqB,CAAC;SACpC;IACL,CAAC;IAGD,oCAAW,GAAX;QACI,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;IACpC,CAAC;IA1CQ,cAAc;QAJ1B,+DAAS,CAAC;YACP,QAAQ,EAAE,WAAW;YACrB,wGAAqC;SACxC,CAAC;+EAKoC,2DAAY;OAJrC,cAAc,CA2C1B;IAAD,qBAAC;CAAA;AA3C0B;;;;;;;;;;;;;ACT3B;AAAA;AAAA;AAAA;IAKI,eAAY,IAAoB;QAC5B,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC9B,CAAC;IACL,YAAC;AAAD,CAAC;;AAED,IAAY,SAKX;AALD,WAAY,SAAS;IACjB,+CAAO;IACP,2CAAK;IACL,yCAAI;IACJ,+CAAO;AACX,CAAC,EALW,SAAS,KAAT,SAAS,QAKpB;;;;;;;;;;;;;;;;;;;;;ACf0C;AACe;AACf;AACM;AAGjD;IAII,sBAAoB,MAAc;QAAlC,iBAaC;QAbmB,WAAM,GAAN,MAAM,CAAQ;QAH1B,YAAO,GAAG,IAAI,4CAAO,EAAO,CAAC;QAC7B,yBAAoB,GAAG,KAAK,CAAC;QAGjC,sCAAsC;QACtC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,eAAK;YACzB,IAAI,KAAK,YAAY,+DAAe,EAAE;gBAClC,IAAI,KAAI,CAAC,oBAAoB,EAAE;oBAC3B,yCAAyC;oBACzC,KAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;iBACrC;qBAAM;oBACH,cAAc;oBACd,KAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;iBACvB;aACJ;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,+BAAQ,GAAR;QACI,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;IACvC,CAAC;IAED,8BAAO,GAAP,UAAQ,OAAe,EAAE,oBAA4B;QAA5B,mEAA4B;QACjD,IAAI,CAAC,KAAK,CAAC,sDAAS,CAAC,OAAO,EAAE,OAAO,EAAE,oBAAoB,CAAC,CAAC;IACjE,CAAC;IAED,4BAAK,GAAL,UAAM,OAAe,EAAE,oBAA4B;QAA5B,mEAA4B;QAC/C,IAAI,CAAC,KAAK,CAAC,sDAAS,CAAC,KAAK,EAAE,OAAO,EAAE,oBAAoB,CAAC,CAAC;IAC/D,CAAC;IAED,2BAAI,GAAJ,UAAK,OAAe,EAAE,oBAA4B;QAA5B,mEAA4B;QAC9C,IAAI,CAAC,KAAK,CAAC,sDAAS,CAAC,IAAI,EAAE,OAAO,EAAE,oBAAoB,CAAC,CAAC;IAC9D,CAAC;IAED,8BAAO,GAAP,UAAQ,OAAe,EAAE,oBAA4B;QAA5B,mEAA4B;QACjD,IAAI,CAAC,KAAK,CAAC,sDAAS,CAAC,OAAO,EAAE,OAAO,EAAE,oBAAoB,CAAC,CAAC;IACjE,CAAC;IAED,4BAAK,GAAL,UAAM,IAAe,EAAE,OAAe,EAAE,oBAA4B;QAA5B,mEAA4B;QAChE,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;QACjD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;IAC/D,CAAC;IAED,4BAAK,GAAL;QACI,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;IACxB,CAAC;IA9CQ,YAAY;QADxB,gEAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;+EAKH,sDAAM;OAJzB,YAAY,CA+CxB;IAAD,mBAAC;CAAA;AA/CwB;;;;;;;;;;;;;ACNzB;AAAA;AAAA;AAAA;AAAkC;;;;;;;;;;;;;;;;;;;;ACAS;AAIA;AACF;AAKzC;IAEE,mBACU,UAAsB,EACtB,MAAc;QADd,eAAU,GAAV,UAAU,CAAY;QACtB,WAAM,GAAN,MAAM,CAAQ;IACtB,CAAC;IAEH,+BAAW,GAAX,UACE,IAA4B,EAC5B,KAA0B;QAE1B,IAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,EAAC;YAC5B,OAAO,IAAI,CAAC;SACb;aAAI;YACH,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;SACnC;IACH,CAAC;IAhBU,SAAS;QAHrB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;+EAIsB,uDAAU;YACd,sDAAM;OAJb,SAAS,CAiBrB;IAAD,gBAAC;CAAA;AAjBqB;;;;;;;;;;;;;;;;;;ACVqB;AAK3C;IAEE;IAAgB,CAAC;IAEjB,8BAAS,GAAT,UAAU,KAAc;QACtB,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,EAAC,KAAK,CAAC,CAAC;IAChD,CAAC;IACD,6BAAQ,GAAR;QACE,OAAO,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IACjD,CAAC;IACD,oCAAe,GAAf,UAAgB,WAAW;QACzB,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;IAC1D,CAAC;IACD,mCAAc,GAAd;QACE,OAAO,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IACpD,CAAC;IACD,iCAAY,GAAZ;QACE,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QAC3C,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QAC3C,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IAChD,CAAC;IACD,iCAAY,GAAZ,UAAa,QAAiB;QAC5B,YAAY,CAAC,OAAO,CAAC,UAAU,EAAC,QAAQ,CAAC,CAAC;IAC5C,CAAC;IACD,gCAAW,GAAX;QACE,OAAO,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IAC1C,CAAC;IA1BU,UAAU;QAHtB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;;OACW,UAAU,CA4BtB;IAAD,iBAAC;CAAA;AA5BsB;;;;;;;;;;;;ACLvB,+DAA+D,uJ;;;;;;;;;;;ACA/D,gQ;;;;;;;;;;;;;;;;;ACAkD;AAOlD;IAEE;IAAgB,CAAC;IAEjB,mCAAQ,GAAR;IACA,CAAC;IALU,gBAAgB;QAL5B,+DAAS,CAAC;YACT,QAAQ,EAAE,aAAa;YACvB,8GAAuC;;SAExC,CAAC;;OACW,gBAAgB,CAO5B;IAAD,uBAAC;CAAA;AAP4B;;;;;;;;;;;;;;;;;;;;;ACPc;AAE6C;AACzB;AAC1B;AAIrC;IAEE,qBACU,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAFhC,YAAO,GAAG,qEAAW,CAAC,OAAO,CAAC;IAG1B,CAAC;IAEL,0BAAI,GAAJ,UAAK,GAAW,EAAE,KAAM;QACtB,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;QAChC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,0DAAG,CAAC,aAAG,IAAI,UAAG,EAAH,CAAG,CAAC,CAAC,CAAC;IACnE,CAAC;IATU,WAAW;QAHvB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;+EAIsB,+DAAU;OAHrB,WAAW,CAUvB;IAAD,kBAAC;CAAA;AAVuB;;;;;;;;;;;;;ACLxB;AAAA;AAAA;AAAA;IAAA;IASA,CAAC;IARC,8CAAY,GAAZ,UAAa,OAA2B,EAAE,IAAwC;QAChF,IAAM,WAAW,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC;QAC/C,IAAM,cAAc,GAAG,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QACzE,IAAM,cAAc,GAAG,CAAC,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC;QACtD,IAAM,aAAa,GAAG,CAAC,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,IAAI,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;QAElI,OAAO,WAAW,IAAI,CAAC,cAAc,IAAI,CAAC,cAAc,IAAI,aAAa,CAAC,CAAC,CAAC;IAC9E,CAAC;IACH,8BAAC;AAAD,CAAC;;AAED;IAAA;IA4BA,CAAC;IA3BC,mEAAmE;IAC5D,0BAAQ,GAAf,UAAgB,SAAoB;QAClC,IAAI,KAAK,CAAC;QACV,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,KAAK,IAAI,GAAG,IAAI,SAAS,CAAC,QAAQ,EAAE;YAClC,IAAI,SAAS,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;gBAC1C,IAAI,OAAO,GAA6B,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAEhE,IAAI,KAAK,KAAK,SAAS,EAAE;oBACvB,KAAK,GAAG,OAAO,CAAC,KAAK;iBACtB;qBAAM;oBACL,IAAI,KAAK,KAAK,OAAO,CAAC,KAAK,EAAE;wBAC3B,KAAK,GAAG,KAAK,CAAC;wBACd,MAAM;qBACP;iBACF;aACF;SACF;QAED,IAAI,KAAK,EAAE;YACT,OAAO,IAAI,CAAC;SACb;QAED,OAAO;YACL,QAAQ,EAAE,IAAI;SACf,CAAC;IACJ,CAAC;IACH,wBAAC;AAAD,CAAC;;;;;;;;;;;;;;ACxCD;AAAA;AAAA;IAAA;IAWA,CAAC;IATQ,+BAAa,GAApB,UAAqB,EAAe;QAClC,IAAG,EAAE,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,QAAQ,IAAI,EAAE,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,QAAQ,EAAC;YAC5E,OAAO;gBACL,aAAa,EAAE,IAAI;aACpB,CAAC;SACH;aAAM;YACL,OAAO,IAAI,CAAC;SACb;IACH,CAAC;IACH,wBAAC;AAAD,CAAC;;;;;;;;;;;;;;ACbD;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;IACjB,OAAO,EAAE,6BAA6B;CACvC,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;AChBnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkB;AAC6B;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SignupComponent } from './components/signup/signup.component';\nimport { SigninComponent } from './components/signin/signin.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { AuthGuard } from './core/auth.guard';\nimport { HomelayoutComponent } from './components/layouts/homelayout.component';\nimport { LoginlayoutComponent } from './components/layouts/loginlayout.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomelayoutComponent,\n    canActivate: [AuthGuard],\n    children: [\n      { path: 'dashboard', component: DashboardComponent }\n    ]\n  },\n  {\n    path: '',\n    component: LoginlayoutComponent,\n    children: [\n      { path: 'signin', component: SigninComponent },\n      { path: 'signup', component: SignupComponent }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, {useHash: true})],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<router-outlet></router-outlet>\\n<app-loading></app-loading>\\n\"","import { Component } from '@angular/core';\nimport { AlertComponent } from './core/alert/alert.component';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'angular';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ToastrModule } from 'ngx-toastr';  \nimport { SignupComponent } from './components/signup/signup.component';\nimport { \n  MatInputModule, \n  MatSelectModule, \n  MatButtonModule, \n  MatCheckboxModule, \n  MatIconModule\n} from '@angular/material';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { SigninComponent } from './components/signin/signin.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { AlertComponent } from './core/alert';\nimport { NgxSpinnerModule } from 'ngx-spinner';\nimport { LoadingComponent } from './core/loading/loading.component';\nimport { HeaderComponent } from './components/header/header.component';\nimport { FooterComponent } from './components/footer/footer.component';\nimport { HomelayoutComponent } from './components/layouts/homelayout.component';\nimport { LoginlayoutComponent } from './components/layouts/loginlayout.component';\nimport { BsDropdownModule } from 'ngx-bootstrap';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SignupComponent,\n    SigninComponent,\n    DashboardComponent,\n    AlertComponent,\n    LoadingComponent,\n    HeaderComponent,\n    FooterComponent,\n    HomelayoutComponent,\n    LoginlayoutComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    ToastrModule.forRoot(\n      {  \n        closeButton: true,  \n      } \n    ),\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    NgxSpinnerModule,\n    // MATERIAL\n    MatInputModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatIconModule,\n    BsDropdownModule.forRoot()\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZGFzaGJvYXJkL2Rhc2hib2FyZC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<hr>\\n<div class=\\\"text-center\\\"><h3>Welcome: {{ currentUser?.name }}</h3></div>\"","import { Component, OnInit } from '@angular/core';\nimport { JwtService } from './../../core/jwt.service';\nimport { currentUser } from './../header/header.model';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n  currentUser: currentUser = new currentUser;\n  constructor(\n    private jwtService: JwtService,\n  ) {\n    this.currentUser = JSON.parse(this.jwtService.getCurrentUser());\n  }\n\n  ngOnInit() {\n  }\n\n  \n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZm9vdGVyL2Zvb3Rlci5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<p>\\n  footer works!\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvaGVhZGVyL2hlYWRlci5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div class=\\\"row-fluid\\\">\\n  <div class=\\\"example-button-row\\\">\\n    <button mat-button color=\\\"primary\\\" routerLink=\\\"['/dashboard']\\\">\\n      <mat-icon>home</mat-icon> Dashboard\\n    </button>\\n    \\n    <div class=\\\"btn-group float-right\\\" dropdown>\\n      <button id=\\\"button-basic\\\" dropdownToggle type=\\\"button\\\" class=\\\"btn btn-default dropdown-toggle\\\" aria-controls=\\\"dropdown-basic\\\">\\n        {{ currentUser?.name }} <span class=\\\"caret\\\"></span>\\n      </button>\\n      <ul id=\\\"dropdown-basic\\\" *dropdownMenu class=\\\"dropdown-menu\\\"\\n          role=\\\"menu\\\" aria-labelledby=\\\"button-basic\\\">\\n        <li role=\\\"menuitem\\\"><a class=\\\"dropdown-item\\\" href=\\\"#\\\">Profile</a></li>\\n        <li role=\\\"menuitem\\\"><a class=\\\"dropdown-item\\\" href=\\\"#\\\">Setting</a></li>\\n        <li class=\\\"divider dropdown-divider\\\"></li>\\n        <li role=\\\"menuitem\\\" (click)=\\\"logout()\\\"><mat-icon>logout</mat-icon> Logout</li>\\n      </ul>\\n    </div>\\n    \\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { JwtService } from './../../core/jwt.service';\nimport { AlertService } from './../../core/alert/alert.service';\nimport { Router } from '@angular/router';\nimport { currentUser } from './header.model';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n  currentUser: currentUser = new currentUser;\n  constructor(\n    private router: Router,\n    private jwtService: JwtService,\n    private alertService: AlertService\n  ) { \n    this.currentUser = JSON.parse(this.jwtService.getCurrentUser());\n  }\n\n  ngOnInit() {\n  }\n\n  logout(){\n    this.jwtService.destroyToken();\n    this.alertService.success('You have logged out successfully.');\n    this.router.navigate(['/signin']);\n  }\n\n}","export class currentUser {\n    id: string;\n    name: string;\n    username: string;\n    email: string;\n}","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-homelayout',\n  template: `\n    <app-header></app-header> \n    <router-outlet></router-outlet>\n  `\n})\nexport class HomelayoutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-loginlayout',\n  template: `<router-outlet></router-outlet>`\n})\nexport class LoginlayoutComponent {}\n","module.exports = \".full-width {\\n    width: 100%;\\n    margin-bottom: 10px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9zaWduaW4vc2lnbmluLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0lBQ1osb0JBQW9CO0NBQ3ZCIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9zaWduaW4vc2lnbmluLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZnVsbC13aWR0aCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbn0iXX0= */\"","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-3\\\"></div>\\n    \\n    <div class=\\\"col-6\\\">\\n      <br>\\n      <br>\\n      <h2 class=\\\"section-title text-center\\\">Signin With a Exist Account</h2>\\n      <br>\\n      <app-alert></app-alert>\\n      <form [formGroup]=\\\"userDetails\\\" (ngSubmit)=\\\"doSignin(userDetails.value)\\\">\\n\\n        <mat-form-field class=\\\"full-width\\\"> <!-- EMAIL -->\\n          <input matInput type=\\\"email\\\" placeholder=\\\"Email\\\" formControlName=\\\"email\\\" required>\\n          <mat-error *ngFor=\\\"let validation of validation_messages.email\\\">\\n            <mat-error class=\\\"error-message\\\" *ngIf=\\\"userDetails.get('email').hasError(validation.type) && (userDetails.get('email').dirty || userDetails.get('email').touched)\\\">{{validation.message}}</mat-error>\\n          </mat-error>\\n        </mat-form-field>\\n\\n        <mat-form-field class=\\\"full-width\\\"> <!-- PASSWORD -->\\n          <input matInput type=\\\"password\\\" placeholder=\\\"Password\\\" formControlName=\\\"password\\\" required>\\n          <mat-error *ngFor=\\\"let validation of validation_messages.password\\\">\\n            <mat-error class=\\\"error-message\\\" *ngIf=\\\"userDetails.get('password').hasError(validation.type) && (userDetails.get('password').dirty || userDetails.get('password').touched)\\\">{{validation.message}}</mat-error>\\n          </mat-error>\\n        </mat-form-field>\\n        \\n        <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" [disabled]=\\\"!userDetails.valid\\\">Signin</button>&nbsp;&nbsp;&nbsp; <a [routerLink]=\\\"['/signup']\\\">Create an account!</a>\\n\\n      </form>\\n    </div>\\n\\n    <div class=\\\"col-3\\\"></div>\\n    \\n  </div>\\n</div>\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, Validators, FormControl, FormBuilder } from '@angular/forms';\nimport { SigninService } from './signin.service';\nimport { JwtService } from './../../core/jwt.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { Router } from '@angular/router';\nimport { AlertService } from './../../core/alert/alert.service';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\n@Component({\n  selector: 'app-signin',\n  templateUrl: './signin.component.html',\n  styleUrls: ['./signin.component.css']\n})\nexport class SigninComponent implements OnInit {\n  userDetails: FormGroup;\n  constructor(\n    private fb: FormBuilder,\n    private signinService: SigninService,\n    private toastr: ToastrService,\n    private router: Router,\n    private jwtService: JwtService,\n    private alertService: AlertService,\n    private spinner: NgxSpinnerService\n  ) { }\n  validation_messages = {\n    'email': [ \n      { type: 'required', message: 'Email is required' },\n      { type: 'pattern', message: 'Enter a valid email' }  \n    ],\n    'password': [\n      { type: 'required', message: 'Password is required' }\n    ]\n  };\n\n  ngOnInit() {\n    this.createForms();\n  }\n\n  createForms() {\n    // user details form validations\n    this.userDetails = this.fb.group({\n       email: new FormControl('', Validators.compose([\n         Validators.required,\n         Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n       ])),\n       password: new FormControl('', Validators.required)\n    });\n  };\n\n  doSignin(value){\n    this.alertService.clear();\n    this.signinService.doSignin(value).subscribe((data) => {\n      if(data.status == 200){\n        this.toastr.success(data.message,'Success');\n        this.jwtService.saveToken(data.token);\n        let userDetails = {\n          id: data.data._id,\n          name: data.data.fullname,\n          email: data.data.email,\n          username: data.data.username\n        }\n        this.jwtService.saveCurrentUser(JSON.stringify(userDetails));\n        this.router.navigate(['/dashboard']);\n      }else{\n        this.alertService.error(data.message);\n      }\n    });\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from './../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SigninService {\n  baseUrl: string = environment.baseUrl;\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  public doSignin(param: object): any {\n    let apiURL = `${this.baseUrl}users/doSignin`;\n    return this.http.post(apiURL, param);\n  }\n}\n","module.exports = \".full-width {\\n    width: 100%;\\n    margin-bottom: 10px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9zaWdudXAvc2lnbnVwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0lBQ1osb0JBQW9CO0NBQ3ZCIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9zaWdudXAvc2lnbnVwLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZnVsbC13aWR0aCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbn0iXX0= */\"","module.exports = \"<div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-3\\\"></div>\\n      \\n      <div class=\\\"col-6\\\">\\n        <br>\\n        <br>\\n        <h2 class=\\\"section-title text-center\\\">Create a New Account</h2>\\n        <br>\\n        <app-alert></app-alert>\\n        <form [formGroup]=\\\"userDetails\\\" (ngSubmit)=\\\"doSignup(userDetails.value)\\\">\\n          <mat-form-field class=\\\"full-width\\\"> <!-- FULL NAME -->\\n            <input matInput placeholder=\\\"Full Name\\\" formControlName=\\\"fullname\\\" required>\\n            <mat-error *ngFor=\\\"let validation of validation_messages.fullname\\\">\\n              <mat-error class=\\\"error-message\\\" *ngIf=\\\"userDetails.get('fullname').hasError(validation.type) && (userDetails.get('fullname').dirty || userDetails.get('fullname').touched)\\\">{{validation.message}}</mat-error>\\n            </mat-error>\\n          </mat-form-field>\\n          \\n          <mat-form-field class=\\\"full-width\\\"> <!-- USERNAME -->\\n            <input matInput maxlength=\\\"25\\\" placeholder=\\\"Username\\\" formControlName=\\\"username\\\" required>\\n            <mat-error *ngFor=\\\"let validation of validation_messages.username\\\">\\n              <mat-error class=\\\"error-message\\\" *ngIf=\\\"userDetails.get('username').hasError(validation.type) && (userDetails.get('username').dirty || userDetails.get('username').touched)\\\">{{validation.message}}</mat-error>\\n            </mat-error>\\n          </mat-form-field>\\n          \\n          <mat-form-field class=\\\"full-width\\\"> <!-- EMAIL -->\\n            <input matInput type=\\\"email\\\" placeholder=\\\"Email\\\" formControlName=\\\"email\\\" required>\\n            <mat-error *ngFor=\\\"let validation of validation_messages.email\\\">\\n              <mat-error class=\\\"error-message\\\" *ngIf=\\\"userDetails.get('email').hasError(validation.type) && (userDetails.get('email').dirty || userDetails.get('email').touched)\\\">{{validation.message}}</mat-error>\\n            </mat-error>\\n          </mat-form-field>\\n\\n          <div formGroupName=\\\"matching_passwords\\\"> <!-- PASSWORD -->\\n            <mat-form-field class=\\\"full-width\\\">\\n              <input matInput type=\\\"password\\\" placeholder=\\\"Password\\\" formControlName=\\\"password\\\" required>\\n              <mat-error *ngFor=\\\"let validation of validation_messages.password\\\">\\n                <mat-error class=\\\"error-message\\\" *ngIf=\\\"userDetails.get('matching_passwords').get('password').hasError(validation.type) && (userDetails.get('matching_passwords').get('password').dirty || userDetails.get('matching_passwords').get('password').touched)\\\">{{validation.message}}</mat-error>\\n              </mat-error>\\n            </mat-form-field>\\n  \\n            <mat-form-field class=\\\"full-width\\\">\\n              <input matInput type=\\\"password\\\" placeholder=\\\"Confirm Password\\\" formControlName=\\\"confirm_password\\\"  [errorStateMatcher]=\\\"parentErrorStateMatcher\\\" required>\\n              <mat-error *ngFor=\\\"let validation of validation_messages.confirm_password\\\">\\n                <mat-error class=\\\"error-message\\\" *ngIf=\\\"(userDetails.get('matching_passwords').get('confirm_password').hasError(validation.type)|| userDetails.get('matching_passwords').hasError(validation.type)) && (userDetails.get('matching_passwords').get('confirm_password').dirty || userDetails.get('matching_passwords').get('confirm_password').touched)\\\">{{validation.message}}</mat-error>\\n              </mat-error>\\n            </mat-form-field>\\n          </div>\\n\\n          <mat-checkbox formControlName=\\\"terms\\\"> <!-- TERMS & CONDITIONS -->\\n            I accept terms and conditions\\n          </mat-checkbox>\\n          <mat-error *ngFor=\\\"let validation of validation_messages.terms\\\">\\n            <mat-error class=\\\"error-message\\\" *ngIf=\\\"userDetails.get('terms').hasError(validation.type) && (userDetails.get('terms').dirty || userDetails.get('terms').touched)\\\">{{validation.message}}</mat-error>\\n          </mat-error>\\n          \\n          <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" [disabled]=\\\"!userDetails.valid\\\">Primary</button> &nbsp;&nbsp;&nbsp; <a [routerLink]=\\\"['/signin']\\\">Already have a membership!</a>\\n  \\n        </form>\\n      </div>\\n\\n      <div class=\\\"col-3\\\"></div>\\n      \\n    </div>\\n  </div>\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, Validators, FormControl, FormBuilder } from '@angular/forms';\nimport { UsernameValidator } from './../../core/validaters/username.validaters';\nimport { PasswordValidator } from './../../core/validaters/password.validater';\nimport { SignupService } from './signup.service';\nimport { environment } from './../../../environments/environment';\nimport { ToastrService } from 'ngx-toastr';\nimport { AlertService } from './../../core/alert/alert.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n  baseUrl: string = environment.baseUrl;\n  constructor( \n    private fb: FormBuilder,\n    private signupService: SignupService,\n    private toastr: ToastrService,\n    private router: Router,\n    private alertService: AlertService,\n  ) { }\n\n  userDetails: FormGroup;\n  matching_passwords_group: FormGroup;\n  validation_messages = {\n    'fullname': [ { type: 'required', message: 'Full name is required' } ],\n    'username': [ \n      { type: 'required', message: 'Username is required' },\n      { type: 'minlength', message: 'Username must be at least 5 characters long' },\n      { type: 'maxlength', message: 'Username cannot be more than 25 characters long' },\n      { type: 'pattern', message: 'Your username must contain only numbers and letters' },\n      { type: 'validUsername', message: 'Your username has already been taken' }\n    ],\n    'email': [ \n      { type: 'required', message: 'Email is required' },\n      { type: 'pattern', message: 'Enter a valid email' }  \n    ],\n    'confirm_password': [\n      { type: 'required', message: 'Confirm password is required' },\n      { type: 'areEqual', message: 'Password mismatch' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required' },\n      { type: 'minlength', message: 'Password must be at least 5 characters long' },\n      { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, and one number' }\n    ],\n    'terms': [\n      { type: 'pattern', message: 'You must accept terms and conditions' }\n    ]\n  };\n\n  ngOnInit() {\n    this.createForms();\n  }\n\n  createForms() {\n    // matching passwords validation\n    this.matching_passwords_group = new FormGroup({\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(5),\n        Validators.required,\n        Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')\n      ])),\n      confirm_password: new FormControl('', Validators.required)\n    }, (formGroup: FormGroup) => {\n      return PasswordValidator.areEqual(formGroup);\n    });\n\n    // user details form validations\n    this.userDetails = this.fb.group({\n      fullname: ['', Validators.required ],\n      username: new FormControl('', Validators.compose([\n        UsernameValidator.validUsername,\n        Validators.maxLength(25),\n        Validators.minLength(5),\n        Validators.pattern('^(?=.*[a-zA-Z])(?=.*[0-9])[a-zA-Z0-9]+$'),\n        Validators.required\n       ])),\n       email: new FormControl('', Validators.compose([\n         Validators.required,\n         Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n       ])),\n       matching_passwords: this.matching_passwords_group,\n       terms: new FormControl(false, Validators.pattern('true'))\n    });\n  };\n\n  doSignup(value){\n    this.signupService.doSignup(value).subscribe((data) => {\n      if(data.status == 200){\n        this.toastr.success(data.message,'Success');\n        this.router.navigate(['/signin']);\n      }else{\n        this.alertService.error(data.message);\n      }\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from './../../../environments/environment';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SaveService } from './../..//core/save.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SignupService {\n  baseUrl: string = environment.baseUrl;\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n  constructor(\n    private http: HttpClient,\n    private saveService: SaveService\n  ) { }\n\n  public doSignup(param: object): Observable<any> {\n    return this.saveService.post('users/doSignup', param).pipe(map(\n        data => {\n          return data\n        }\n    ));\n\n\n  }\n  public getUsername(username: string): Observable<any> {\n    let apiURL = `${this.baseUrl}users/getUsername/${username}`;\n    return this.http.get(apiURL);\n  }\n  \n}\n","module.exports = \"<div *ngFor=\\\"let alert of alerts\\\" class=\\\"{{ cssClass(alert) }} alert-dismissable\\\">\\n    {{alert.message}}\\n    <a class=\\\"close\\\" (click)=\\\"removeAlert(alert)\\\">&times;</a>\\n</div>\"","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { Alert, AlertType } from './alert.model';\nimport { AlertService } from './alert.service';\n\n@Component({\n    selector: 'app-alert',\n    templateUrl: './alert.component.html'\n})\nexport class AlertComponent implements OnInit, OnDestroy {\n    private subscription: Subscription;\n    alerts: Alert[] = [];\n\n    constructor(private alertService: AlertService) { }\n\n    ngOnInit() {\n        this.subscription = this.alertService.getAlert().subscribe((alert: Alert) => {\n            if (!alert) {\n                // clear alerts when an empty alert is received\n                this.alerts = [];\n                return;\n            }\n            // add alert to array\n            this.alerts.push(alert);\n        });\n    }\n    removeAlert(alert: Alert) {\n        this.alerts = this.alerts.filter(x => x !== alert);\n    }\n\n    cssClass(alert: Alert) {\n        if (!alert) {\n            return;\n        }\n\n        // return css class based on alert type\n        switch (alert.type) {\n            case AlertType.Success:\n                return 'alert alert-success';\n            case AlertType.Error:\n                return 'alert alert-danger';\n            case AlertType.Info:\n                return 'alert alert-info';\n            case AlertType.Warning:\n                return 'alert alert-warning';\n        }\n    }\n\n\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\n","export class Alert {\n    type: AlertType;\n    message: string;\n    alertId: string;\n    keepAfterRouteChange: boolean;\n    constructor(init?:Partial<Alert>) {\n        Object.assign(this, init);\n    }\n}\n\nexport enum AlertType {\n    Success,\n    Error,\n    Info,\n    Warning\n}","import { Injectable } from '@angular/core';\nimport { Router, NavigationStart } from '@angular/router';\nimport { Observable, Subject } from 'rxjs';\nimport { Alert, AlertType } from './alert.model';\n\n@Injectable({ providedIn: 'root' })\nexport class AlertService {\n    private subject = new Subject<any>();\n    private keepAfterRouteChange = false;\n\n    constructor(private router: Router) {\n        // clear alert message on route change\n        router.events.subscribe(event => {\n            if (event instanceof NavigationStart) {\n                if (this.keepAfterRouteChange) {\n                    // only keep for a single location change\n                    this.keepAfterRouteChange = false;\n                } else {\n                    // clear alert\n                    this.subject.next();\n                }\n            }\n        });\n    }\n\n    getAlert(): Observable<any> {\n        return this.subject.asObservable();\n    }\n\n    success(message: string, keepAfterRouteChange = false) {\n        this.alert(AlertType.Success, message, keepAfterRouteChange);\n    }\n\n    error(message: string, keepAfterRouteChange = false) {\n        this.alert(AlertType.Error, message, keepAfterRouteChange);\n    }\n\n    info(message: string, keepAfterRouteChange = false) {\n        this.alert(AlertType.Info, message, keepAfterRouteChange);\n    }\n\n    warning(message: string, keepAfterRouteChange = false) {\n        this.alert(AlertType.Warning, message, keepAfterRouteChange);\n    }\n\n    alert(type: AlertType, message: string, keepAfterRouteChange = false) {\n        this.keepAfterRouteChange = keepAfterRouteChange;\n        this.subject.next(<Alert>{ type: type, message: message });\n    }\n\n    clear() {\n        this.subject.next();\n    }\n}","export * from './alert.component';","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { JwtService } from './jwt.service';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(\n    private jwtService: JwtService,\n    private router: Router\n  ){}\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> | Promise<boolean> | boolean {\n    if(this.jwtService.getToken()){\n      return true;\n    }else{\n      this.router.navigate(['/signin']);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JwtService {\n\n  constructor() { }\n\n  saveToken(token : string){\n    window.localStorage.setItem('jwtToken',token);\n  }\n  getToken() : string {\n    return window.localStorage.getItem('jwtToken');\n  }\n  saveCurrentUser(userDetails){\n    window.localStorage.setItem('currentUser', userDetails);\n  }\n  getCurrentUser() : string {\n    return window.localStorage.getItem('currentUser');\n  }\n  destroyToken(){\n    window.localStorage.removeItem('jwtToken');\n    window.localStorage.removeItem('username');\n    window.localStorage.removeItem('currentUser');\n  }\n  saveUsername(username : string){\n    localStorage.setItem('username',username);\n  }\n  getUsername(){\n    return localStorage.getItem('username');\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvcmUvbG9hZGluZy9sb2FkaW5nLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<ngx-spinner\\n  bdOpacity = 1\\n  bdColor = \\\"rgba(186,186,186,0.42)\\\"\\n  size = \\\"medium\\\"\\n  color = \\\"#676767\\\"\\n  type = \\\"square-jelly-box\\\"\\n  [fullScreen] = \\\"true\\\"\\n>\\n  <p style=\\\"color: white\\\" > Loading... </p>\\n</ngx-spinner>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-loading',\n  templateUrl: './loading.component.html',\n  styleUrls: ['./loading.component.css']\n})\nexport class LoadingComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders, HttpParams, HttpRequest } from '@angular/common/http';\nimport { environment } from './../../environments/environment';\nimport { map } from 'rxjs/operators';\n@Injectable({\n  providedIn: 'root'\n})\nexport class SaveService {\n  apiBase = environment.baseUrl;\n  constructor(\n    private httpClient: HttpClient\n  ) { }\n  \n  post(url: string, param?): Observable<any> {\n    let apiURL = this.apiBase + url;\n    return this.httpClient.post(apiURL, param).pipe(map(res => res));\n  }\n}\n","import { FormControl, FormGroup, NgForm, FormGroupDirective } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\n\nexport class ParentErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = !!(form && form.submitted);\n    const controlTouched = !!(control && (control.dirty || control.touched));\n    const controlInvalid = !!(control && control.invalid);\n    const parentInvalid = !!(control && control.parent && control.parent.invalid && (control.parent.dirty || control.parent.touched));\n\n    return isSubmitted || (controlTouched && (controlInvalid || parentInvalid));\n  }\n}\n\nexport class PasswordValidator {\n  // Inspired on: http://plnkr.co/edit/Zcbg2T3tOxYmhxs7vaAm?p=preview\n  static areEqual(formGroup: FormGroup) {\n    let value;\n    let valid = true;\n    for (let key in formGroup.controls) {\n      if (formGroup.controls.hasOwnProperty(key)) {\n        let control: FormControl = <FormControl>formGroup.controls[key];\n\n        if (value === undefined) {\n          value = control.value\n        } else {\n          if (value !== control.value) {\n            valid = false;\n            break;\n          }\n        }\n      }\n    }\n\n    if (valid) {\n      return null;\n    }\n\n    return {\n      areEqual: true\n    };\n  }\n}\n","import { FormControl } from '@angular/forms';\n\nexport class UsernameValidator {\n\n  static validUsername(fc: FormControl){\n    if(fc.value.toLowerCase() === \"abc123\" || fc.value.toLowerCase() === \"123abc\"){\n      return {\n        validUsername: true\n      };\n    } else {\n      return null;\n    }\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  baseUrl: 'http://182.70.249.165:3000/'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import 'hammerjs';\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}